name: ci
on: [push]
jobs:

  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    container: ${{ matrix.image }}

    strategy:
      matrix:
        include:
          - image: alpine:latest
            vim-ycm-owner: detwiler
            vim-ycm-ref: llvm-10
            vm-box-name: alpine312
          - image: fedora:latest
            vim-ycm-owner: ycm-core
            vim-ycm-ref: master
            vm-box-name: fedora33
          - image: ubuntu:rolling
            vim-ycm-owner: ycm-core
            vim-ycm-ref: master
            vm-box-name: ubuntu2010

    env:
      DEBIAN_FRONTEND: noninteractive
      GNULIB_SRCDIR: "~/.gnulib"
      GNULIB_URL: 'https://github.com/coreutils/gnulib.git'
      USER: ${{ github.repository_owner }}
      VIM_YCM_OWNER: ${{ matrix.vim-ycm-owner }}
      VIM_YCM_REF: ${{ matrix.vim-ycm-ref }}
      VM_BOX_NAME: ${{ matrix.vm-box-name }}

    steps:
      - name: Install Git
        run: |
          os_id=`sed -ne 's/^ID=//p' /etc/os-release`
          case $os_id in
              alpine) apk add git tar;;
              fedora) dnf -y install git-core which;;
              ubuntu) apt-get -y update && apt-get -y install git;;
          esac

      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # see: https://github.com/actions/checkout/issues/290
      - name: Fetch Tags
        run: git fetch --force --tags

      - name: Cache Gnulib Repository
        id: cache-gnulib
        uses: actions/cache@v2
        env:
          cache-name: cache-gnulib
        with:
          path: ${{ env.GNULIB_SRCDIR }}
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles(format('{0}/{1}', env.GNULIB_SRCDIR '.git/refs/heads/master')) }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-
            ${{ runner.os }}-

      - name: Fetch Upstream Gnulib Repository
        run: |
          if [ -d $GNULIB_SRCDIR ]; then
              cd $GNULIB_SRCDIR
              git pull --ff-only
          else
              git clone $GNULIB_URL $GNULIB_SRCDIR
          fi

      - name: Bootstrap
        run: ./bootstrap --install-prereqs

      - name: Configure
        run: ./configure --datarootdir=$RUNNER_TEMP

      - name: Build
        run: make

      - name: Distribution Test
        run: make distcheck

      - name: Install
        run: make install

      - name: Provision Package Upgrade Test
        run: provision/package-upgrade

      - name: Provision Package Install Test
        run: provision/package-install

      - name: Provision Pip Install Test
        run: provision/pip-install

      - name: Provision Envconf Install Test
        run: |
          chmod a+x provision/envconf-install
          provision/envconf-install

      - name: Configure Version
        run: echo "PROJECT_VERSION=`cat .version`" >>$GITHUB_ENV

      - name: Upload Distribution Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: distribution-artifacts
          if-no-files-found: error
          path: |
            dev-vms-${{ env.PROJECT_VERSION }}.tar.gz
            .version

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build-test
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Download Distribution Artifacts
        uses: actions/download-artifact@v2
        with:
          name: distribution-artifacts

      - name: Configure Version
        run: echo "PROJECT_VERSION=`cat .version`" >>$GITHUB_ENV

      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.PROJECT_VERSION }}
          release_name: Release ${{ env.PROJECT_VERSION }}

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: dev-vms-${{ env.PROJECT_VERSION }}.tar.gz
          asset_name: dev-vms-${{ env.PROJECT_VERSION }}.tar.gz
          asset_content_type: application/gzip
